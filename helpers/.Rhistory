regressionData$Height <- as.numeric(gsub("[^0-9]", "", regressionData$Height))
regressionData$Weight <- as.numeric(gsub("[^0-9]", "", regressionData$Weight))
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Height <- as.numeric(levels(regressionData$Height))[regressionData$Height]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Height[] <- lapply(regressionData$Height, as.character)
View(regressionData)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Height %>% mutate_if(is.factor, as.character) -> regressionData$Height
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height %>% mutate_if(is.factor, as.character) -> regressionData$Height
regressionData$Height <- as.numeric(levels(regressionData$Height)[regressionData$Height])
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
set.seed(500)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Height <- as.numeric(levels(regressionData$Height)[regressionData$Height])
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Height <- as.numeric(regressionData$Height)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
View(regressionData)
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(levels(regressionData$Height)[regressionData$Height])
as.numeric(levels(regressionData$Height)[regressionData$Height])
regressionData$Height <- as.character(regressionData$Height)
regressionData$Height <-levels(regressionData$Height)[regressionData$Height]
as.numeric(regressionData$Height)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Height <- type.convert(regressionData$Height, na.strings = "NA", as.is = FALSE, dec = ".")
is.character(regressionData$Height)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- levels(regressionData$Height)[regressionData$Height]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData$Weight <- levels(regressionData$Height)[regressionData$Weight]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- levels(regressionData$Height)[regressionData$Height]
regressionData$Weight <- levels(regressionData$Weight)[regressionData$Weight]
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
is.numeric(regressionData$Height)
View(regressionData)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- levels(regressionData$Height)[regressionData$Height]
regressionData$Weight <- levels(regressionData$Weight)[regressionData$Weight]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "Preffered_Position", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
is.numeric(regressionData$Height)
apply(regressionData,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(regressionData),round(0.75*nrow(regressionData)))
train <- regressionData[index,]
test <- regressionData[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
set.seed(500)
library(MASS)
index <- sample(1:nrow(regressionData),round(0.75*nrow(regressionData)))
train <- regressionData[index,]
test <- regressionData[-index,]
lm.fit <- glm(medv~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
View(test)
View(train)
lm.fit <- glm(medv~., data=train)
maxs <- apply(regressionData, 2, max)
mins <- apply(regressionData, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
scaled <- as.data.frame(scale(regressionData, center = mins, scale = maxs - mins))
maxs <- apply(regressionData, 2, max)
mins <- apply(regressionData, 2, min)
scaled <- as.data.frame(scale(regressionData, center = mins, scale = maxs - mins))
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData$Height <- levels(regressionData$Height)[regressionData$Height]
regressionData$Weight <- levels(regressionData$Weight)[regressionData$Weight]
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
regressionData$Height <- as.numeric(regressionData$Height)
regressionData$Weight <- as.numeric(regressionData$Weight)
View(regressionData)
regressionData <- fullData[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "ValueUnified", "WageUnified")]
regressionData$Height <- gsub("[^0-9]", "", regressionData$Height)
regressionData$Weight <- gsub("[^0-9]", "", regressionData$Weight)
regressionData$Height <- as.numeric(as.character(regressionData$Height))
regressionData$Weight <- as.numeric(as.character(regressionData$Weight))
View(regressionData)
regressionData$ValueUnified <- as.numeric(as.character(regressionData$ValueUnified))
View(regressionData)
regressionData$ValueUnified <- as.numeric(regressionData$ValueUnified)
View(regressionData)
index <- sample(1:nrow(regressionData),round(0.75*nrow(regressionData)))
maxs <- apply(regressionData, 2, max)
mins <- apply(regressionData, 2, min)
scaled <- as.data.frame(scale(regressionData, center = mins, scale = maxs - mins))
View(scaled)
train <- scaled[index,]
test <- scaled[-index,]
View(test)
View(test)
n <- names(train)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
library(neuralnet)
install.packages('neuralnet')
n <- names(train)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
library(neuralnet)
n <- names(train)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
View(regressionData)
n <- names(train)
f <- as.formula(paste("ValueUnified ~", paste(n[!n %in% "ValueUnified"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
n <- names(train)
f <- as.formula(paste("ValueUnified ~", paste(n[!n %in% "ValueUnified"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
plot(nn)
plot(nn)
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
pr.nn <- compute(nn,test[,1:7])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
pr.nn <- compute(nn,test[,1:7])
pr.nn <- compute(nn,test[,1:7])
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
pr.nn <- compute(nn,test[,1:7])
pr.nn <- compute(nn,test[,1:7])
View(matches)
View(test)
View(test)
View(test)
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
pr.nn <- compute(nn,test[1:7])
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=F)
View(test)
pr.nn <- compute(nn,test[1:7])
pr.nn <- compute(nn,test[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "WageUnified")])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
View(pr.nn_)
test.r <- (test_$ValueUnified)*(max(data$ValueUnified)-min(data$ValueUnified))+min(data$ValueUnified)
test.r <- (test$ValueUnified)*(max(data$ValueUnified)-min(data$ValueUnified))+min(data$ValueUnified)
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=F)
pr.nn <- compute(nn,test[c("Contract_Expiry", "Rating", "Height", "Weight", "Age", "WageUnified")])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
test.r <- (test$ValueUnified)*(max(data$ValueUnified)-min(data$ValueUnified))+min(data$ValueUnified)
test.r <- (test$ValueUnified)*(max(scaled$ValueUnified)-min(scaled$ValueUnified))+min(scaled$ValueUnified)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test)
plot(test$ValueUnified,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test)
plot(test$ValueUnified,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
test.r <- (test$ValueUnified)*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test)
plot(test$ValueUnified,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test)
View(pr.nn_)
index <- sample(1:nrow(regressionData),round(0.75*nrow(regressionData)))
maxs <- apply(regressionData, 2, max)
mins <- apply(regressionData, 2, min)
scaled <- as.data.frame(scale(regressionData, center = mins, scale = maxs - mins))
valueDataset <- scaled %>% select(-WageUnified)
wageDataset  <- scaled %>% select(-ValueUnified)
trainValue <- valueDataset[index,]
testValue <- valueDataset[-index,]
nValue <- names(trainValue)
fValue <- as.formula(paste("ValueUnified ~", paste(nValue[!nValue %in% "ValueUnified"], collapse = " + ")))
nnValue <- neuralnet(fValue,data=trainValue,hidden=c(6,3),linear.output=F)
trainWage <- valueDataset[index,]
testWage <- valueDataset[-index,]
nWage <- names(trainWage)
fWage <- as.formula(paste("WageUnified ~", paste(nWage[!nWage %in% "WageUnified"], collapse = " + ")))
nnValue <- neuralnet(fWage,data=trainValue,hidden=c(6,3),linear.output=F)
index <- sample(1:nrow(regressionData),round(0.75*nrow(regressionData)))
maxs <- apply(regressionData, 2, max)
mins <- apply(regressionData, 2, min)
scaled <- as.data.frame(scale(regressionData, center = mins, scale = maxs - mins))
valueDataset <- scaled %>% select(-WageUnified)
library(dplyr)
valueDataset <- scaled %>% select(-WageUnified)
wageDataset  <- scaled %>% select(-ValueUnified)
trainValue <- valueDataset[index,]
testValue <- valueDataset[-index,]
nValue <- names(trainValue)
fValue <- as.formula(paste("ValueUnified ~", paste(nValue[!nValue %in% "ValueUnified"], collapse = " + ")))
nnValue <- neuralnet(fValue,data=trainValue,hidden=c(6,3),linear.output=F)
trainWage <- valueDataset[index,]
testWage <- valueDataset[-index,]
nWage <- names(trainWage)
fWage <- as.formula(paste("WageUnified ~", paste(nWage[!nWage %in% "WageUnified"], collapse = " + ")))
nnValue <- neuralnet(fWage,data=trainValue,hidden=c(6,3),linear.output=F)
trainWage <- wageDataset[index,]
testWage <- wageDataset[-index,]
nWage <- names(trainWage)
fWage <- as.formula(paste("WageUnified ~", paste(nWage[!nWage %in% "WageUnified"], collapse = " + ")))
nnValue <- neuralnet(fWage,data=trainValue,hidden=c(6,3),linear.output=F)
valueDataset <- scaled %>% select(-WageUnified)
wageDataset  <- scaled %>% select(-ValueUnified)
trainValue <- valueDataset[index,]
testValue <- valueDataset[-index,]
nValue <- names(trainValue)
fValue <- as.formula(paste("ValueUnified ~", paste(nValue[!nValue %in% "ValueUnified"], collapse = " + ")))
trainWage <- wageDataset[index,]
testWage <- wageDataset[-index,]
nWage <- names(trainWage)
fWage <- as.formula(paste("WageUnified ~", paste(nWage[!nWage %in% "WageUnified"], collapse = " + ")))
nnValue <- neuralnet(fWage,data=trainValue,hidden=c(6,3),linear.output=F)
nnValue <- neuralnet(fWage,data=trainWage,hidden=c(6,3),linear.output=F)
nnValue <- neuralnet(fValue,data=trainValue,hidden=c(6,3),linear.output=F)
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age ) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- compute(nnValue,test_[1:5])
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age ) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- compute(nnValue,test_[1:5])
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
nnValue <- neuralnet(fValue,data=trainValue,hidden=c(6,3),linear.output=F)
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
library(neuralnet)
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- compute(nnValue,test_[1:5])
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnValue,test_[1:5])
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnValue,predictionData[1:5])
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnValue,predictionData[1:5])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
return(pr.nn_)
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
View(testingtheprediction)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnValue,predictionData[1:5])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
return(pr.nn_)
}
getWagePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnWage,predictionData[1:5])
pr.nn_ <- pr.nn$net.result*(max(regressionData$WageUnified)-min(regressionData$WageUnified))+min(regressionData$WageUnified)
return(pr.nn_)
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
testingtheprediction2 <- getWagePrediction(2018, 50, 180, 80, 20)
nnWage <- neuralnet(fWage,data=trainWage,hidden=c(6,3),linear.output=F)
getValuePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnValue,predictionData[1:5])
pr.nn_ <- pr.nn$net.result*(max(regressionData$ValueUnified)-min(regressionData$ValueUnified))+min(regressionData$ValueUnified)
return(pr.nn_)
}
getWagePrediction <- function(contract_expiry, rating, height, weight, age) {
predictionData <- data.frame(contract_expiry, rating, height, weight, age)
maxs <- apply(predictionData, 2, max)
mins <- apply(predictionData, 2, min)
scaledPredictionData <- as.data.frame(scale(predictionData, center = mins, scale = maxs - mins))
pr.nn <- neuralnet::compute(nnWage,predictionData[1:5])
pr.nn_ <- pr.nn$net.result*(max(regressionData$WageUnified)-min(regressionData$WageUnified))+min(regressionData$WageUnified)
return(pr.nn_)
}
testingtheprediction <- getValuePrediction(2018, 50, 180, 80, 20)
testingtheprediction2 <- getWagePrediction(2018, 50, 180, 80, 20)
source('C:/Users/User/projects/BusinessIntelligence/APIs/GlobalFacebook.R')
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
library(Rfacebook)
myOAuth <- fbOAuth(app_id="555260741482711", app_secret="fc3825532b3cf45d7d47ae902711be2d",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="555260741482711", app_secret="fc3825532b3cf45d7d47ae902711be2d",extended_permissions = TRUE)
library(Rfacebook)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
library(Rfacebook)
install.packages('Rfacebook')
install.packages("Rfacebook")
install.packages('Rook')
library(Rfacebook)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="145191066244438", app_secret="bf9c627f8ce55fe75163b7506a3072bb",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="246697525863735", app_secret="7b711db69dd650dde359f3d9802282ab",extended_permissions = TRUE)
myOAuth <- fbOAuth(app_id="246697525863735", app_secret="7b711db69dd650dde359f3d9802282ab")
myOAuth <- fbOAuth(app_id="246697525863735", app_secret="7b711db69dd650dde359f3d9802282ab")
install_github("pablobarbera/Rfacebook/Rfacebook")
install_github("pablobarbera/Rfacebook/Rfacebook")
install.packages("Rfacebook")  # from CRAN
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir = "Rfacebook")
playername <- "Cristiano Ronaldo"
token <- "EAACEdEose0cBALIIxZA7u1RQiuZBZCFFKiZAGRbhHMAsHvB6ZCNpAEyLfeMruIVvb7AN2e2jK2TSHXNYyG4F7ThsZBRkZCAr3gj8v7jbshaMNzLqUiH2vWcwbPXatjkyKhFWDIhPkW0OFdIqUjzGLUTrNeFDPe9ZAZCV34IfkoA2nIZA4ACDeF5AjYeR2T5PyNBQQZD"
playername <- "Cristiano Ronaldo"
pagename <- searchPages(playername, token, n = 200)
library(Rfacebook)
pagename <- Rfacebook::searchPages(playername, token, n = 1)
View(pagename)
pagename <- Rfacebook::searchPages(playername, token, n = 50)
View(pagename)
playername <- "Lionel Messi"
pagename <- Rfacebook::searchPages(playername, token, n = 50)
View(pagename)
View(fullData)
library(dplyr)
token <- "EAACEdEose0cBALIIxZA7u1RQiuZBZCFFKiZAGRbhHMAsHvB6ZCNpAEyLfeMruIVvb7AN2e2jK2TSHXNYyG4F7ThsZBRkZCAr3gj8v7jbshaMNzLqUiH2vWcwbPXatjkyKhFWDIhPkW0OFdIqUjzGLUTrNeFDPe9ZAZCV34IfkoA2nIZA4ACDeF5AjYeR2T5PyNBQQZD"
for(playername in fullData$Name) {
page <- Rfacebook::searchPages(playername, token, n = 50)
page_summary <- page %>% summarise(total_likes = sum(likes), talking_about = sum(talking_about))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
library(dplyr)
for(playername in fullData$Name) {
page <- Rfacebook::searchPages(playername, token, n = 50)
page_summary <- page %>% summarise(total_likes = sum(likes), talking_about = sum(talking_about))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
for(playername in fullData$Name) {
page <- Rfacebook::searchPages(playername, token, n = 50)
page_summary <- page %>% summarize(likes = sum(likes), talking_about_count = sum(talking_about))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
for(playername in fullData$Name) {
page <- Rfacebook::searchPages(playername, token, n = 50)
page_summary <- page %>% summarize(total_likes = sum(likes), talking_about = sum(talking_about_count))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
View(fullData)
for(playername in fullData$Name) {
try(page <- Rfacebook::searchPages(playername, token, n = 50))
page_summary <- page %>% summarize(total_likes = sum(likes), talking_about = sum(talking_about_count))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
View(fullData)
fullData$likes[565:640] <- 0
fullData$talking_about[565:640] <- 0
for(playername in fullData$Name[is.na(fullData$likes)]) {
try(page <- Rfacebook::searchPages(playername, token, n = 50))
page_summary <- page %>% summarize(total_likes = sum(likes), talking_about = sum(talking_about_count))
fullData$likes[fullData$Name == playername] <- page_summary$total_likes
fullData$talking_about[fullData$Name == playername] <- page_summary$talking_about
}
View(fullData)
save(fullData, file = "fullDataFBextended.csv")
setwd("C:/Users/User/projects/BusinessIntelligence/APIs")
save(fullData, file = "fullDataFBextended.csv")
write.csv(fullData,"fullDataFBextended.csv")
fullData$likes[565:10000] <- NA
fullData$talking_about[565:10000] <- NA
write.csv(fullData,"fullDataFBextended.csv")
secrets <- fromJSON(file='scrapers/twitter_secrets.json.nogit')
setup_twitter_oauth(secrets$api_key,
secrets$api_secret,
secrets$access_token,
secrets$access_token_secret)
library(twitteR)
setup_twitter_oauth(secrets$api_key,
secrets$api_secret,
secrets$access_token,
secrets$access_token_secret)
twitteruser <- lookupUsers("Cristiano Ronaldo", includeNA=FALSE)
twitteruser <- lookupUsers("CristianoRonaldo", includeNA=FALSE)
twitteruser <- lookupUsers("Ronaldo", includeNA=FALSE)
twitteruser <- lookupUsers("CRonaldo", includeNA=FALSE)
twitteruser <- lookupUsers("CristianoRonaldo", includeNA=FALSE)
twitteruser <- lookupUsers("RonaldoCristiano", includeNA=FALSE)
twitteruser <- lookupUsers("Cristiano", includeNA=FALSE)
twitteruser <- getUser("Cristiano")
twitteruser <- lookupUsers("Cristiano")
View(fullData)
twitteruser <- lookupUsers("Kevindebruyne")
twitteruser <- lookupUsers("debruyne")
install.packages('instaR')
library(instaR)
my_app_client_id  <- “3f75b726a73043c487c791aba29f336b”
my_app_client_secret <- “e954c0a6c3f04903a5653e6437c70e82”
my_app_client_id  <- "3f75b726a73043c487c791aba29f336b"
my_app_client_secret <- "e954c0a6c3f04903a5653e6437c70e82"
instaOAuth( client_id, client_secret, scope = “basic”)
instaOAuth( client_id, client_secret, scope = "basic")
instaOAuth(my_app_client_id, my_app_client_secret, scope = "basic")
my_app_OAuth <- instaOAuth(my_app_client_id, my_app_client_secret, scope = "basic")
my_access_token <- my_app_OAuth$credentials$access_token
save(my_app_OAuth, file="my_app_OAuth")
instaposts <- searchInstagram(tag = "Cristiano", my_access_token, n= 100)
load("my_app_OAuth")
my_access_token <- my_app_OAuth$credentials$access_token
instaposts <- searchInstagram(tag = "Cristiano", my_access_token, n= 100)
statusses <- searchFacebook("Cristiano Ronaldo", token, n = 200, since = NULL, until = NULL)
?searchFacebook
View(page)
source('C:/Users/User/projects/BusinessIntelligence/helpers/neuralnetwork.R')
setwd("C:/Users/User/projects/BusinessIntelligence")
source('C:/Users/User/projects/BusinessIntelligence/helpers/neuralnetwork.R')
setwd("C:/Users/User/projects/BusinessIntelligence/loaddata")
source('C:/Users/User/projects/BusinessIntelligence/helpers/neuralnetwork.R')
save(nnValue, "NNValue")
setwd("C:/Users/User/projects/BusinessIntelligence/helpers")
plot(nnValue, file = "NNValue")
nnValue$result.matrix
saveRDS(nnValue, "NNValue.rds")
nnValue2 <- readRDS("NNValue.rds")
identical(nnValue, nnValue2, ignore.environment = TRUE)
